#version 330

in vec3 position;
in vec2 textureCoords;
out vec2 pass_coords;
out vec3 surfaceNormal;
out vec3 lightVector;
//out vec3 color;
uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPos;
in vec3 normal;
out vec3 cameraVector;
uniform float useFakeLight;
out float visibility;
const float density=0.001;
const float gradient=1.0;
uniform vec4 plane=vec4(0,-1,0,15);
out vec4 clipSpace;
out vec2 texCoords;
const float tiling=60.0;
uniform vec3 camPosition;

void main(void){
	
	vec4 worldPosition=transformationMatrix*vec4(position.x,0,position.y,1.0);
	vec4 positionRelative=viewMatrix*worldPosition;
	clipSpace=projectionMatrix*positionRelative;
	gl_Position = clipSpace;
	
	texCoords=vec2(position.x/2.0+0.5,position.y/2.0+0.5)*tiling;
	cameraVector=camPosition-worldPosition.xyz;
	//color = vec3(position.x+0.5,0.0,position.y+0.5);
	
	//pass_coords= vec2(position.x/2.0 + 0.5, position.y/2.0 + 0.5);
	
	
}